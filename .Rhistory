for (l in layers) {
# Filter data by region and layer
filtered_data <- meta_m1_layers %>%
filter(region == r & layer == l)
# Filter data by region and layer
#filtered_data <- meta_m1_layers %>%
#filter(region == "A1" & layer == "L1")
# Create pie charts for each region-layer combination
PD = filtered_data %>% group_by(within_area_subclass, class) #%>% summarise(n = sum(n))
p <- PieDonut(PD, aes(class, within_area_subclass, count=n), title = paste("region", r, "layer", l))
}}
layers[8:14]
layers[,8:14]
dim(layers)
layers[8:14,]
layers[8:14,]<-NULL
rm (layers[8:14,])
layers(-c[8:14,])
regions <- c("A1", "DLPFC", "M1", "MTG", "S1", "V1", "ACC")
layers <- c("L1", "L2", "L3", "L5")
# Loop over regions and layers
for (r in regions) {
for (l in layers) {
# Filter data by region and layer
filtered_data <- meta_m1_layers %>%
filter(region == r & layer == l)
# Filter data by region and layer
#filtered_data <- meta_m1_layers %>%
#filter(region == "A1" & layer == "L1")
# Create pie charts for each region-layer combination
PD = filtered_data %>% group_by(within_area_subclass, class) #%>% summarise(n = sum(n))
p <- PieDonut(PD, aes(class, within_area_subclass, count=n), title = paste("region", r, "layer", l))
}}
library(ggplot2)
library(webr)
library(dplyr)
# Define regions and layers
regions = (unique(meta_m1_layers$region))
#regions <- c("A1", "DLPFC", "M1", "MTG", "S1", "V1", "ACC")
#, "ACC")
layers = (unique(meta_m1_layers$layer))
#layers <- c("L1", "L2", "L3", "L5")
#, "L2_3", "L4", "L4ab", "L4c", "L5b", "L6", "L6a", "L6b", "WM")
# Loop over regions and layers
for (r in regions) {
for (l in layers) {
# Filter data by region and layer
filtered_data <- meta_m1_layers %>%
filter(region == r & layer == l)
# Filter data by region and layer
#filtered_data <- meta_m1_layers %>%
#filter(region == "A1" & layer == "L1")
# Create pie charts for each region-layer combination
PD = filtered_data %>% group_by(within_area_subclass, class) #%>% summarise(n = sum(n))
p <- PieDonut(PD, aes(class, within_area_subclass, count=n), title = paste("region", r, "layer", l))
}}
library(ggplot2)
library(webr)
library(dplyr)
# Define regions and layers
regions = (unique(meta_m1_layers$region))
#regions <- c("A1", "DLPFC", "M1", "MTG", "S1", "V1", "ACC")
#, "ACC")
layers = (unique(meta_m1_layers$layer))
#layers <- c("L1", "L2", "L3", "L5")
#, "L2_3", "L4", "L4ab", "L4c", "L5b", "L6", "L6a", "L6b", "WM")
# Loop over regions and layers
for (r in regions) {
for (l in layers) {
# Filter data by region and layer
filtered_data <- meta_m1_layers %>%
filter(region == r & layer == l, na.rm="FALSE")
# Filter data by region and layer
#filtered_data <- meta_m1_layers %>%
#filter(region == "A1" & layer == "L1")
# Create pie charts for each region-layer combination
PD = filtered_data %>% group_by(within_area_subclass, class) #%>% summarise(n = sum(n))
p <- PieDonut(PD, aes(class, within_area_subclass, count=n), title = paste("region", r, "layer", l))
}}
library(ggplot2)
library(webr)
library(dplyr)
# Define regions and layers
regions = (unique(meta_m1_layers$region))
#regions <- c("A1", "DLPFC", "M1", "MTG", "S1", "V1", "ACC")
#, "ACC")
layers = (unique(meta_m1_layers$layer))
#layers <- c("L1", "L2", "L3", "L5")
#, "L2_3", "L4", "L4ab", "L4c", "L5b", "L6", "L6a", "L6b", "WM")
# Loop over regions and layers
for (r in regions) {
for (l in layers) {
# Filter data by region and layer
filtered_data <- meta_m1_layers %>%
filter(region == r & layer == l, na.rm="TRUE")
# Filter data by region and layer
#filtered_data <- meta_m1_layers %>%
#filter(region == "A1" & layer == "L1")
# Create pie charts for each region-layer combination
PD = filtered_data %>% group_by(within_area_subclass, class) #%>% summarise(n = sum(n))
p <- PieDonut(PD, aes(class, within_area_subclass, count=n), title = paste("region", r, "layer", l))
}}
library(ggplot2)
library(webr)
library(dplyr)
# Define regions and layers
regions = (unique(meta_m1_layers$region))
#regions <- c("A1", "DLPFC", "M1", "MTG", "S1", "V1", "ACC")
#, "ACC")
layers = (unique(meta_m1_layers$layer))
#layers <- c("L1", "L2", "L3", "L5")
#, "L2_3", "L4", "L4ab", "L4c", "L5b", "L6", "L6a", "L6b", "WM")
# Loop over regions and layers
for (r in regions) {
for (l in layers) {
# Filter data by region and layer
filtered_data <- meta_m1_layers %>%
filter(region == r & layer == l)
filtered_data<- as.data.frame(filtered_data)
# Filter data by region and layer
#filtered_data <- meta_m1_layers %>%
#filter(region == "A1" & layer == "L1")
# Create pie charts for each region-layer combination
PD = filtered_data %>% group_by(within_area_subclass, class) #%>% summarise(n = sum(n))
p <- PieDonut(PD, aes(class, within_area_subclass, count=n), title = paste("region", r, "layer", l))
}}
install.packages('rsconnect')
rsconnect::setAccountInfo(name='3zqqmj-alexandra0allison-de0sousa',
token='5FAE5852F0E5968DCFE7284152521BA9',
secret='<SECRET>')
rsconnect::setAccountInfo(name='3zqqmj-alexandra0allison-de0sousa', token='5FAE5852F0E5968DCFE7284152521BA9', secret='5T8yDH5jQPbKOLG3OmL2A7r06IWTYYBickD8izVP')
library(rsconnect)
setwd("~/Library/CloudStorage/OneDrive-AllenInstitute/Analysis Evo M1 cytoarch GLI cell types")
library(tidyverse)
meta_m1 <- read_csv(file = "species_meta_m1_20221005.csv.gz")
count_meta_m1 <-
meta_m1 %>%
group_by(species, class, predicted.id) %>%
count()
count_meta_m1_noclass <-
meta_m1 %>%
group_by(species, predicted.id) %>%
count()
library(tidyr)
count_meta_m1_noclass_gathered <-
count_meta_m1_noclass %>%
tidyr::spread(predicted.id, n)
library(dplyr)
count_meta_m1_genus <- count_meta_m1_noclass_gathered %>%           # Create duplicate of column with new name
mutate(genus = species)
count_meta_m1_genus                       # Print new data frame
count_m1 <- count_meta_m1_genus[, c( "genus", "species", "Astro", "Chandelier", "Endo", "L2/3 IT", "L4 IT", "L5 ET", "L5 IT", "L5/6 NP", "L6 CT", "L6 IT", "L6 IT Car3", "L6b", "Lamp5", "Lamp5_Lhx6", "Micro-PVM", "Oligo", "OPC", "Pax6", "Pvalb", "Sncg", "Sst", "Sst Chodl", "Vip", "VLMC")] # leave the row index blank to keep all rows
count_m1
count_m1$genus[ count_m1$genus == "baboon_Papio anubis" ] <- "Papio"
count_m1$genus[ count_m1$genus == "cat_Felis catus" ] <- "Felis"
count_m1$genus[ count_m1$genus == "Chlorocebus sabaeus" ] <- "Chlorocebus"
count_m1$genus[ count_m1$genus == "Dasypus novemcinctus" ] <- "Dasypus"
count_m1$genus[ count_m1$genus == "galago_Otolemur garnettii" ] <- "Otolemur"
count_m1$genus[ count_m1$genus == "macaque_nemestrina_Macaca nemestrina" ] <- "Macaca"
count_m1$genus[ count_m1$genus == "Mustela putorius furo" ] <- "Mustela"
count_m1$genus[ count_m1$genus == "Owl_Monkey_Aotus nancymaae" ] <- "Aotus"
count_m1$genus[ count_m1$genus == "pig_Sus scrofa" ] <- "Sus"
count_m1$genus[ count_m1$genus == "rabbit_Oryctolagus cuniculus" ] <- "Oryctolagus"
count_m1$genus[ count_m1$genus == "Rattus norvegicus" ] <- "Rattus"
count_m1$genus[ count_m1$genus == "south_american_squirrel_monkey_Saimiri sciureus" ] <- "Saimiri"
count_m1$genus[ count_m1$genus == "tree_shrew_Tupaia belangeri" ] <- "Tupaia"
count_m1$genus[ count_m1$genus == "Urocitellus parryii" ] <- "Urocitellus"
count_m1
gli.m1=read.csv("GLI_M1.csv", header=TRUE)
library(dplyr)
gli.m1_genus <- gli.m1 %>%           # Create duplicate of column with new name
mutate(genus = Species)
gli.m1_genus                       # Print new data frame
gli_m1<- gli.m1_genus[, c("genus", "Species", "n", "Cortical.mean", "Cortical.mean.SEM", "Layer.II", "Layer.II.SEM", "Layer.III", "Layer.III.SEM", "Layer.V", "Layer.V.SEM", "Layer.VI", "Layer.VI.SEM", "meany.o", "meanx.o", "sd.o", "skew.o", "kurt.o", "meany.d", "meanx.d", "sd.d", "skew.d", "kurt.d")] # leave the row index blank to keep all rows
gli_m1
gli_m1$genus[ gli_m1$genus == "Homo sapiens" ] <- "Homo"
gli_m1$genus[ gli_m1$genus == "Pan troglodytes" ] <- "Pan"
gli_m1$genus[ gli_m1$genus == "Gorilla gorilla" ] <- "Gorilla"
gli_m1$genus[ gli_m1$genus == "Macaca fascicularis" ] <- "Macaca"
gli_m1$genus[ gli_m1$genus == "Papio anubis" ] <- "Papio"
gli_m1
count_gli_m1 <- merge(count_m1,gli_m1,by="genus")
print(count_gli_m1)
count_gli_m1$n <- as.numeric(count_gli_m1$n)
count_gli_m1$Cortical.mean <- as.numeric(count_gli_m1$Cortical.mean)
count_gli_m1$Layer.II <- as.numeric(count_gli_m1$Layer.II)
count_gli_m1$Layer.III <- as.numeric(count_gli_m1$Layer.III)
count_gli_m1$Layer.V <- as.numeric(count_gli_m1$Layer.V)
count_gli_m1$Layer.VI <- as.numeric(count_gli_m1$Layer.VI)
count_gli_m1$meany.o <- as.ordered(count_gli_m1$meany.o)
count_gli_m1$sd.o <- as.numeric(count_gli_m1$sd.o)
count_gli_m1$skew.o <- as.numeric(count_gli_m1$skew.o)
count_gli_m1$kurt.o <- as.numeric(count_gli_m1$kurt.o)
count_gli_m1$meany.d <- as.numeric(count_gli_m1$meany.d)
count_gli_m1$Layer.VI <- as.numeric(count_gli_m1$Layer.VI)
count_gli_m1$meany.o <- as.ordered(count_gli_m1$meany.o)
count_gli_m1$meanx.d <- as.numeric(count_gli_m1$meanx.d)
count_gli_m1$sd.d <- as.numeric(count_gli_m1$sd.d)
count_gli_m1$skew.d <- as.numeric(count_gli_m1$skew.d)
count_gli_m1$kurt.d <- as.numeric(count_gli_m1$kurt.d)
model.Cortical.mean<-lm(n ~ Cortical.mean, data = count_gli_m1)
model.Layer.II<-lm(n ~ Layer.II, data = count_gli_m1)
model.Layer.III<-lm(n ~ Layer.III, data = count_gli_m1)
model.Layer.V<-lm(n ~ Layer.V, data = count_gli_m1)
model.Layer.VI<-lm(n ~ Layer.VI, data = count_gli_m1)
model.meany.o<-lm(n ~ meany.o, data = count_gli_m1)
model.meanx.o<-lm(n ~ meanx.o, data = count_gli_m1)
model.sd.o<-lm(n ~ sd.o, data = count_gli_m1)
#model.skew.o<-lm(n ~ skew.o, data = count_gli_m1)
model.kurt.o<-lm(n ~ kurt.o, data = count_gli_m1)
#model.meany.d<-lm(n ~ meany.d, data = count_gli_m1)
model.meanx.d<-lm(n ~ meanx.d, data = count_gli_m1)
model.sd.d<-lm(n ~ sd.d, data = count_gli_m1)
#model.skew.d<-lm(n ~ skew.d, data = count_gli_m1)
model.kurt.d<-lm(n ~ kurt.d, data = count_gli_m1)
summary(model.Cortical.mean)
summary(model.Layer.II)
summary(model.Layer.III)
summary(model.Layer.V)
summary(model.Layer.VI)
summary(model.meany.o)
summary(model.meanx.o)
summary(model.sd.o)
#summary(model.skew.o)
summary(model.kurt.o)
#summary(model.meany.d)
summary(model.meanx.d)
summary(model.sd.d)
#summary(model.skew.d)
summary(model.kurt.d)
data ("count_gli_m1")
mydata <- count_gli_m1[, c("Astro", "Chandelier", "Endo", "L2/3 IT", "L4 IT", "L5 ET", "L5 IT", "L5/6 NP", "L6 CT", "L6 IT", "L6 IT Car3", "L6b", "Lamp5", "Lamp5_Lhx6", "Micro-PVM", "Oligo", "OPC", "Pax6", "Pvalb", "Sncg", "Sst", "Sst Chodl", "Vip", "VLMC", "n", "Cortical.mean", "Cortical.mean.SEM", "Layer.II", "Layer.II.SEM", "Layer.III", "Layer.III.SEM", "Layer.V", "Layer.V.SEM", "Layer.VI", "Layer.VI.SEM", "meany.o", "meanx.o", "sd.o", "skew.o", "kurt.o", "meany.d", "meanx.d", "sd.d", "skew.d", "kurt.d")]
head(mydata, 21)
mydata <- count_gli_m1[, c("L2/3 IT", "L4 IT", "L5 ET", "L5 IT", "L5/6 NP", "L6 CT", "L6 IT", "L6 IT Car3", "L6b", "Lamp5", "Lamp5_Lhx6", "Layer.II", "Layer.III", "Layer.V", "Layer.VI")]
head(mydata, 21)
res <- cor(mydata)
round(res, 2)
# Plot subclass proportions
meta_m1 %>%
group_by(Species, class, predicted.id) %>%
count() %>%
group_by(Species, class) %>%
mutate(prop = n/sum(n),
group = ifelse(class == "Excitatory", 1,
ifelse(class == "Inhibitory", 2,
ifelse(class == "Non-neuronal", 3, NA)))) %>%
ggplot(aes(x = factor(predicted.id, levels = unique(predicted.id)[order(group)]), y = Species, color = class, size = prop)) +
geom_point() +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
xlab("Predicted ID")
# Plot subclass proportions
meta_m1 %>%
group_by(Species, class, predicted.id) %>%
count() %>%
group_by(Species, class) %>%
mutate(prop = n/sum(n),
group = ifelse(class == "Excitatory", 1,
ifelse(class == "Inhibitory", 2,
ifelse(class == "Non-neuronal", 3, NA)))) %>%
ggplot(aes(x = factor(predicted.id, levels = unique(predicted.id)[order(group)]), y = Species, color = class, size = prop)) +
geom_point() +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
xlab("Predicted ID")
# Plot subclass proportions
meta_m1 %>%
group_by(Species, class, predicted.id) %>%
count() %>%
group_by(Species, class) %>%
mutate(prop = n/sum(n),
group = ifelse(class == "Excitatory", 1,
ifelse(class == "Inhibitory", 2,
ifelse(class == "Non-neuronal", 3, NA)))) %>%
ggplot(aes(x = factor(predicted.id, levels = unique(predicted.id)[order(group)]), y = Species, color = class, size = prop)) +
geom_point() +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
xlab("Predicted ID")
setwd("~/Library/CloudStorage/OneDrive-AllenInstitute/Analysis Evo M1 Traits Predictions")
library(readxl)
library(dplyr)
# Load data
Young_etal_2013 <- read_excel("Young_etal_2013.xlsx", sheet = "reformatted")
# Replace spaces and non-standard characters in column names with periods
colnames(Young_etal_2013) <- make.names(colnames(Young_etal_2013), unique = TRUE)
# Filter out the repeated baboons
Young_etal_filtered <- Young_etal_2013 %>%
filter(across(everything(), ~!grepl("Ignore", as.character(.))))
View(Young_data)
plot(M1.Mass..g. ~ M1.Area..mm2., data = Young_etal_filtered)
plot(M1.Mass..g. ~ M1.Cell.density..millions..Cells.g, data = Young_etal_filtered)
plot(log(M1.Mass..g.) ~ log(M1.Cell.density..millions..Cells.g), data = Young_etal_filtered)
plot(log(M1.Mass..g.) ~ log(Neuron.density..millions..Neurons.g), data = Young_etal_filtered)
plot(log(M1.Mass..g.) ~ log(M1.Cell.density..millions..Cells.g-Neuron.density..millions..Neurons.g), data = Young_etal_filtered)
cells.model <- lm(log(M1.Mass..g.) ~ log(M1.Cell.density..millions..Cells.g), data = Young_etal_filtered)
summary(cells.model)
neuron.model <- lm(log(M1.Mass..g.) ~ log(Neuron.density..millions..Neurons.g), data = Young_etal_filtered)
summary(neuron.model)
notneuron.model <- lm(log(M1.Mass..g.) ~ log(M1.Cell.density..millions..Cells.g-Neuron.density..millions..Neurons.g), data = Young_etal_filtered)
summary(notneuron.model)
library(tidyverse)
meta_m1 <- read_csv(file = "~/Library/CloudStorage/OneDrive-AllenInstitute/Analysis Evo M1 cytoarch GLI cell types/species_meta_m1_20221005.csv.gz")
# Rename rows in column species (base R option) and correct the squirrel monkey
meta_m1$species[ meta_m1$species == "baboon_Papio anubis" ] <- "Papio anubis"
meta_m1$species[ meta_m1$species == "cat_Felis catus" ] <- "Felis catus"
meta_m1$species[ meta_m1$species == "Chlorocebus sabaeus" ] <- "Chlorocebus sabaeus"
meta_m1$species[ meta_m1$species == "Dasypus novemcinctus" ] <- "Dasypus novemcinctus"
meta_m1$species[ meta_m1$species == "galago_Otolemur garnettii" ] <- "Otolemur garnettii"
meta_m1$species[ meta_m1$species == "macaque_nemestrina_Macaca nemestrina" ] <- "Macaca nemestrina"
meta_m1$species[ meta_m1$species == "Mustela putorius furo" ] <- "Mustela putorius furo"
meta_m1$species[ meta_m1$species == "Owl_Monkey_Aotus nancymaae" ] <- "Aotus nancymaae"
meta_m1$species[ meta_m1$species == "pig_Sus scrofa" ] <- "Sus scrofa"
meta_m1$species[ meta_m1$species == "rabbit_Oryctolagus cuniculus" ] <- "Oryctolagus cuniculus"
meta_m1$species[ meta_m1$species == "Rattus norvegicus" ] <- "Rattus norvegicus"
meta_m1$species[ meta_m1$species == "south_american_squirrel_monkey_Saimiri sciureus" ] <- "Saimiri boliviensis boliviensis"
meta_m1$species[ meta_m1$species == "tree_shrew_Tupaia belangeri" ] <- "Tupaia belangeri"
meta_m1$species[ meta_m1$species == "Urocitellus parryii" ] <- "Urocitellus parryii"
# Rename the column "species" to "Species"
colnames(meta_m1)[colnames(meta_m1) == "species"] <- "Species"
# Plot subclass proportions
meta_m1 %>%
group_by(Species, class, predicted.id) %>%
count() %>%
group_by(Species, class) %>%
mutate(prop = n/sum(n),
group = ifelse(class == "Excitatory", 1,
ifelse(class == "Inhibitory", 2,
ifelse(class == "Non-neuronal", 3, NA)))) %>%
ggplot(aes(x = factor(predicted.id, levels = unique(predicted.id)[order(group)]), y = Species, color = class, size = prop)) +
geom_point() +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
xlab("Predicted ID")
print(meta_m1)
# Plot subclass proportions
png("meta_m1.png")
meta_m1 %>%
group_by(Species, class, predicted.id) %>%
count() %>%
group_by(Species, class) %>%
mutate(prop = n/sum(n),
group = ifelse(class == "Excitatory", 1,
ifelse(class == "Inhibitory", 2,
ifelse(class == "Non-neuronal", 3, NA)))) %>%
ggplot(aes(x = factor(predicted.id, levels = unique(predicted.id)[order(group)]), y = Species, color = class, size = prop)) +
geom_point() +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
xlab("Predicted ID")
print(meta_m1)
# Plot subclass proportions
pdf("meta_m1.pdf")
meta_m1 %>%
group_by(Species, class, predicted.id) %>%
count() %>%
group_by(Species, class) %>%
mutate(prop = n/sum(n),
group = ifelse(class == "Excitatory", 1,
ifelse(class == "Inhibitory", 2,
ifelse(class == "Non-neuronal", 3, NA)))) %>%
ggplot(aes(x = factor(predicted.id, levels = unique(predicted.id)[order(group)]), y = Species, color = class, size = prop)) +
geom_point() +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
xlab("Predicted ID")
print(meta_m1)
pgls.EI_ratio.RelBrainmass <- pgls(log(EI_ratio) ~ log(Body.mass..g.) log(Brain.mass..g.), data = Mammals)
setwd("~/Library/CloudStorage/OneDrive-AllenInstitute/Analysis Evo M1 Traits Predictions")
library(readxl)
library(dplyr)
# Load data
Young_etal_2013 <- read_excel("Young_etal_2013.xlsx", sheet = "reformatted")
# Replace spaces and non-standard characters in column names with periods
colnames(Young_etal_2013) <- make.names(colnames(Young_etal_2013), unique = TRUE)
# Filter out the repeated baboons
Young_etal_filtered <- Young_etal_2013 %>%
filter(across(everything(), ~!grepl("Ignore", as.character(.))))
View(Young_data)
plot(M1.Mass..g. ~ M1.Area..mm2., data = Young_etal_filtered)
plot(M1.Mass..g. ~ M1.Cell.density..millions..Cells.g, data = Young_etal_filtered)
plot(log(M1.Mass..g.) ~ log(M1.Cell.density..millions..Cells.g), data = Young_etal_filtered)
plot(log(M1.Mass..g.) ~ log(Neuron.density..millions..Neurons.g), data = Young_etal_filtered)
plot(log(M1.Mass..g.) ~ log(M1.Cell.density..millions..Cells.g-Neuron.density..millions..Neurons.g), data = Young_etal_filtered)
cells.model <- lm(log(M1.Mass..g.) ~ log(M1.Cell.density..millions..Cells.g), data = Young_etal_filtered)
summary(cells.model)
neuron.model <- lm(log(M1.Mass..g.) ~ log(Neuron.density..millions..Neurons.g), data = Young_etal_filtered)
summary(neuron.model)
notneuron.model <- lm(log(M1.Mass..g.) ~ log(M1.Cell.density..millions..Cells.g-Neuron.density..millions..Neurons.g), data = Young_etal_filtered)
summary(notneuron.model)
library(tidyverse)
meta_m1 <- read_csv(file = "~/Library/CloudStorage/OneDrive-AllenInstitute/Analysis Evo M1 cytoarch GLI cell types/species_meta_m1_20221005.csv.gz")
# Rename rows in column species (base R option) and correct the squirrel monkey
meta_m1$species[ meta_m1$species == "baboon_Papio anubis" ] <- "Papio anubis"
meta_m1$species[ meta_m1$species == "cat_Felis catus" ] <- "Felis catus"
meta_m1$species[ meta_m1$species == "Chlorocebus sabaeus" ] <- "Chlorocebus sabaeus"
meta_m1$species[ meta_m1$species == "Dasypus novemcinctus" ] <- "Dasypus novemcinctus"
meta_m1$species[ meta_m1$species == "galago_Otolemur garnettii" ] <- "Otolemur garnettii"
meta_m1$species[ meta_m1$species == "macaque_nemestrina_Macaca nemestrina" ] <- "Macaca nemestrina"
meta_m1$species[ meta_m1$species == "Mustela putorius furo" ] <- "Mustela putorius furo"
meta_m1$species[ meta_m1$species == "Owl_Monkey_Aotus nancymaae" ] <- "Aotus nancymaae"
meta_m1$species[ meta_m1$species == "pig_Sus scrofa" ] <- "Sus scrofa"
meta_m1$species[ meta_m1$species == "rabbit_Oryctolagus cuniculus" ] <- "Oryctolagus cuniculus"
meta_m1$species[ meta_m1$species == "Rattus norvegicus" ] <- "Rattus norvegicus"
meta_m1$species[ meta_m1$species == "south_american_squirrel_monkey_Saimiri sciureus" ] <- "Saimiri boliviensis boliviensis"
meta_m1$species[ meta_m1$species == "tree_shrew_Tupaia belangeri" ] <- "Tupaia belangeri"
meta_m1$species[ meta_m1$species == "Urocitellus parryii" ] <- "Urocitellus parryii"
# Rename the column "species" to "Species"
colnames(meta_m1)[colnames(meta_m1) == "species"] <- "Species"
# Plot subclass proportions
pdf("meta_m1.pdf")
meta_m1 %>%
group_by(Species, class, predicted.id) %>%
count() %>%
group_by(Species, class) %>%
mutate(prop = n/sum(n),
group = ifelse(class == "Excitatory", 1,
ifelse(class == "Inhibitory", 2,
ifelse(class == "Non-neuronal", 3, NA)))) %>%
ggplot(aes(x = factor(predicted.id, levels = unique(predicted.id)[order(group)]), y = Species, color = class, size = prop)) +
geom_point() +
theme(axis.text.x = element_text(angle=90, vjust=.5, hjust=1)) +
xlab("Predicted ID")
print(meta_m1)
count_meta_m1 <-
meta_m1 %>%
group_by(Species, class, predicted.id) %>%
count()
count_meta_m1_noclass <-
meta_m1 %>%
group_by(Species, predicted.id) %>%
count()
count_meta_m1_class <-
meta_m1 %>%
group_by(Species, class) %>%
count()
library(dplyr)
# Calculate the ratio between Excitatory and Inhibitory cells for each Species and class
EI_ratios <- count_meta_m1 %>%
#filter(class %in% c("Excitatory", "Inhibitory")) %>%
group_by(Species) %>%
summarize(EI_ratio = sum(n[class == "Excitatory"]) / sum(n[class == "Inhibitory"]))
EI_ratios
count_meta_m1_noclass <-
meta_m1 %>%
group_by(Species, predicted.id) %>%
count()
library(tidyr)
count_meta_m1_noclass_gathered <-
count_meta_m1_noclass %>%
tidyr::spread(predicted.id, n)
count_meta_m1_noclass_gathered
# assume that the dataframes are already loaded in your environment
# merge the count_meta_m1 and Traits data frames by the "Species"
CellVariables <- merge(EI_ratios, count_meta_m1_noclass_gathered)
# print the merged data frame
CellVariables
library(readxl)
library(dplyr)
# Load data
Traits <- read_excel("~/Library/CloudStorage/OneDrive-AllenInstitute/Species/Mammalian M1 Evo - Species metadata.xlsx", sheet = "Traits")
# Replace spaces and non-standard characters in column names with periods
colnames(Traits) <- make.names(colnames(Traits), unique = TRUE)
# assume that CellVariables and Traits are already loaded in your environment
# merge the CellVariables and Traits data frames by the "Species" and "Species...3" columns, respectively
merged_df <- merge(CellVariables, Traits, by.x = "Species", by.y = "Species...3")
# print the merged data frame
merged_df
plot(EI_ratio ~ Brain.mass..g., data = merged_df)
text(merged_df$Brain.mass..g., merged_df$EI_ratio,
labels = as.character(merged_df$Species), pos = 3)
plot(EI_ratio ~ Digital.dexterity, data = merged_df)
text(merged_df$Digital.dexterity, merged_df$EI_ratio,
labels = as.character(merged_df$Species), pos = 3)
# plot the "L5 ET" column against the "Brain.mass..g." column
plot(`L5 ET` ~ Brain.mass..g., data = merged_df)
# plot the "L5 ET" column against the "Digital.dexterity" column
plot(`L5 ET` ~ Digital.dexterity, data = merged_df)
plot(log(EI_ratio) ~ log(Brain.mass..g.), data = merged_df)
text(log(merged_df$Brain.mass..g.), log(merged_df$EI_ratio),
labels = as.character(merged_df$Species), pos = 3)
model.EI.Brainmass <- lm(log(EI_ratio) ~ log(Brain.mass..g.), data = merged_df)
summary(model.EI.Brainmass)
model.Dexterity.Brainmass <- lm(Digital.dexterity ~ Brain.mass..g., data = merged_df)
summary(model.Dexterity.Brainmass)
model <- lm(Brain.mass..g. ~ Astro + Chandelier + Endo + `L2/3 IT` + `L4 IT` + `L5 ET` + `L5 IT` + `L5/6 NP` + `L6 CT` + `L6 IT` + `L6 IT Car3` + L6b + Lamp5 + Lamp5_Lhx6 + `Micro-PVM` + Oligo + OPC + Pax6 + Pvalb + Sncg + Sst + `Sst Chodl` + Vip + VLMC, data = merged_df)
summary(model)
model.EI.RelBrainmass <- lm(log(EI_ratio) ~ log(Body.mass..g.) + log(Brain.mass..g.), data = merged_df)
summary(model.EI.RelBrainmass)
model.Dexterity.RelBrainmass <- lm(Digital.dexterity ~ log(Body.mass..g.) + Brain.mass..g., data = merged_df)
summary(model.Dexterity.RelBrainmass)
plot(log(EI_ratio) ~ log(Brain.mass..g.), data = merged_df)
text(log(merged_df$Brain.mass..g.), log(merged_df$EI_ratio),
labels = as.character(merged_df$Species), pos = 3)
abline(model.EI.Brainmass)
library(caper)
MammalTree <-read.tree("species.nwk")
plot(MammalTree)
merged_df$Species <- gsub( " ", "_", merged_df$Species)
Mammals <- comparative.data(phy = MammalTree, data = merged_df, names.col = Species, vcv = TRUE, na.omit = FALSE, warn.dropped = TRUE)
Mammals$dropped
pgls.EI_ratio.Brainmass <- pgls(log(EI_ratio) ~ log(Brain.mass..g.), data = Mammals)
summary(pgls.EI_ratio.Brainmass)
plot(log(EI_ratio) ~ log(Brain.mass..g.), data = merged_df)
text(log(merged_df$Brain.mass..g.), log(merged_df$EI_ratio),
labels = as.character(merged_df$Species), pos = 3)
abline(pgls.EI_ratio.Brainmass)
pgls.ML.EI_ratio.Brainmass <- pgls(log(EI_ratio) ~ log(Brain.mass..g.), data = Mammals, lambda = "ML")
summary(pgls.ML.EI_ratio.Brainmass)
plot(log(EI_ratio) ~ log(Brain.mass..g.), data = merged_df)
text(log(merged_df$Brain.mass..g.), log(merged_df$EI_ratio),
labels = as.character(merged_df$Species), pos = 3)
abline(pgls.ML.EI_ratio.Brainmass)
pgls.EI_ratio.RelBrainmass <- pgls(log(EI_ratio) ~ log(Body.mass..g.) log(Brain.mass..g.), data = Mammals)
pgls.EI_ratio.RelBrainmass <- pgls(log(EI_ratio) ~ log(Body.mass..g.) + log(Brain.mass..g.), data = Mammals)
summary(pgls.EI_ratio.RelBrainmass)
install.packages("surface")
setwd("~/Library/CloudStorage/OneDrive-AllenInstitute/ShinierBrains")
